---
- hosts: '{{host_to_deploy}}'
  vars:
          - app_root: '/opt/globo/{{app}}/{{version}}/'
          - web_port: 8000
          - registry: 'aurelioneto'

  tasks:        
          - name: Create app directory if it does not exist
            file:
             path: '{{app_root}}'
             state: directory
             mode: 0744
          
          - name: Copy app files into host/app_root 
            copy: 
             src: ../app
             dest: '{{app_root}}'
             mode: '0744'

          - name: Copy docker image files into host/app_root
            copy:
             src: ../docker_image/Dockerfile
             dest: '{{app_root}}'
             mode: '0744'

          - name: Copy docker image files into host/app_root
            copy:
             src: ../docker_image/gunicorn_start.sh
             dest: '{{app_root}}'
             mode: '0744'

          - name: Stop application if it was already deployed before (previous version)
            #Here is not the best pratice to stop a container like that. A good idea for the future is use ansible Docker module.
            #However in my environment this module wont work due to the version of my python libraries.
            shell: docker rm -f '{{app}}'
            ignore_errors: yes    

          - name: Build and run docker image of app
            shell: |
                   cd '{{app_root}}'
                   docker build -t '{{registry}}/{{app}}:{{version}}' .
                   docker run -d -p {{web_port}}:8000 --name '{{app}}' '{{registry}}/{{app}}:{{version}}'
            
          - name: Test app is LISTENING at defined port
            wait_for: 
             port: '{{web_port}}'
             state: started
             timeout: 20

          - name: Test API
            shell: |
                    curl -sv localhost:'{{web_port}}'/api/comment/new -X POST -H 'Content-Type: application/json' -d '{"email":"alice@example.com","comment":"first post!","content_id":1}'
                    curl -sv localhost:'{{web_port}}'/api/comment/new -X POST -H 'Content-Type: application/json' -d '{"email":"alice@example.com","comment":"ok, now I am gonna say something more useful","content_id":1}'
                    curl -sv localhost:'{{web_port}}'/api/comment/new -X POST -H 'Content-Type: application/json' -d '{"email":"bob@example.com","comment":"I agree","content_id":1}'
                    curl -sv localhost:'{{web_port}}'/api/comment/new -X POST -H 'Content-Type: application/json' -d '{"email":"bob@example.com","comment":"I guess this is a good thing","content_id":2}'
                    curl -sv localhost:'{{web_port}}'/api/comment/new -X POST -H 'Content-Type: application/json' -d '{"email":"charlie@example.com","comment":"Indeed, dear Bob, I believe so as well","content_id":2}'
                    curl -sv localhost:'{{web_port}}'/api/comment/new -X POST -H 'Content-Type: application/json' -d '{"email":"eve@example.com","comment":"Nah, you both are wrong","content_id":2}'
                    curl -sv localhost:'{{web_port}}'/api/comment/list/1
                    curl -sv localhost:'{{web_port}}'/api/comment/list/2

          - name: All the above success, generate image and push to docker.hub the version
            shell: |
                   docker tag '{{registry}}/{{app}}:{{version}}' '{{registry}}'
                   docker push '{{registry}}/{{app}}:{{version}}'
